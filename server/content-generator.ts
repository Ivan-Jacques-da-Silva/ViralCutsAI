import { GoogleGenAI } from "@google/genai";

const GEMINI_API_KEY = process.env.GEMINI_API_KEY || "";
const hasGeminiKey = GEMINI_API_KEY.length > 0;

if (!hasGeminiKey) {
  console.warn("‚ö†Ô∏è  GEMINI_API_KEY n√£o configurada - Gera√ß√£o de conte√∫do limitada");
}

const ai = hasGeminiKey ? new GoogleGenAI({ apiKey: GEMINI_API_KEY }) : null;

export interface ContentSuggestions {
  title: string;
  description: string;
  hashtags: string;
}

export async function generatePublicationContent(
  analysis: string,
  transcription: string
): Promise<ContentSuggestions> {
  if (!hasGeminiKey || !ai) {
    console.warn("[content-generator] GEMINI_API_KEY n√£o configurada - Usando sugest√µes padr√£o");
    return {
      title: "V√≠deo incr√≠vel!",
      description: "Confira este momento impactante! Configure GEMINI_API_KEY para sugest√µes personalizadas. üî•",
      hashtags: "#viral #fyp #trending #shorts #reels"
    };
  }

  try {
    const prompt = `Voc√™ √© um especialista em marketing de conte√∫do para redes sociais (TikTok, YouTube Shorts, Instagram Reels, Facebook).

AN√ÅLISE DO V√çDEO:
${analysis}

TRANSCRI√á√ÉO DO √ÅUDIO:
${transcription}

TAREFA:
Crie sugest√µes otimizadas para publica√ß√£o nas redes sociais. As sugest√µes devem ser:
- **Chamativas e virais** - que gerem cliques e engajamento
- **Otimizadas para algoritmos** - com palavras-chave relevantes
- **Curtas e impactantes** - diretas ao ponto

REQUISITOS:
1. **T√çTULO**: M√°ximo 100 caracteres, chamativo, que gere curiosidade
2. **DESCRI√á√ÉO**: Entre 150-300 caracteres, com call-to-action e contexto
3. **HASHTAGS**: Entre 5-10 hashtags relevantes e populares, separadas por espa√ßo

IMPORTANTE:
- Use linguagem natural e envolvente
- Inclua emojis estrat√©gicos (mas com modera√ß√£o)
- Foque no momento mais impactante do v√≠deo
- As hashtags devem ser em portugu√™s e ingl√™s quando relevante

RESPONDA APENAS COM UM JSON V√ÅLIDO neste formato:
{
  "title": "t√≠tulo chamativo aqui",
  "description": "descri√ß√£o completa aqui com call-to-action",
  "hashtags": "#hashtag1 #hashtag2 #hashtag3"
}`;

    const response = await ai.models.generateContent({
      model: "gemini-2.5-pro",
      contents: [{ role: "user", parts: [{ text: prompt }] }],
      config: {
        responseMimeType: "application/json",
        responseSchema: {
          type: "object",
          properties: {
            title: { type: "string" },
            description: { type: "string" },
            hashtags: { type: "string" }
          },
          required: ["title", "description", "hashtags"]
        }
      }
    });

    const result = JSON.parse(response.text || "{}");

    return {
      title: result.title || "V√≠deo incr√≠vel!",
      description: result.description || "Confira este momento impactante!",
      hashtags: result.hashtags || "#viral #fyp #trending"
    };
  } catch (error) {
    console.error("Erro ao gerar sugest√µes de conte√∫do:", error);
    
    // Fallback b√°sico
    return {
      title: "V√≠deo incr√≠vel!",
      description: "Confira este momento impactante! üî•",
      hashtags: "#viral #fyp #trending #shorts #reels"
    };
  }
}
